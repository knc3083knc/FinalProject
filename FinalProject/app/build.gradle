apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'key0'
            keyPassword 'FinalProject'
            storeFile file('/home/snawin/adk/navtu.jks')
            storePassword 'FinalProject'
        }
    }
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.example.aneazxo.finalproject"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    sourceSets { main { jni.srcDirs = ['src/main/jni', 'src/main/jniLib/', 'src/main/jniLibs/'] } }
//    splits {
    // Configures multiple APKs based on ABI.
//        abi {

    // Enables building multiple APKs per ABI.
//            enable true

    // By default all ABIs are included, so use reset() and include to specify that we only
    // want APKs for x86, armeabi-v7a, and mips.

    // Resets the list of ABIs that Gradle should create APKs for to none.
//            reset()

    // Specifies a list of ABIs that Gradle should create APKs for.
    //include "arm64-v8a", "armeabi", "armeabi-v7a",  "mips",  "mips64", "x86",  "x86_64"
//            include "armeabi", "armeabi-v7a", "mips", "x86"

    // Specifies that we do not want to also generate a universal APK that includes all ABIs.
//            universalApk true
//        }
//    }
    externalNativeBuild {
        ndkBuild {
            path 'Android.mk'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':openCVLibrary320')
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.google.android.gms:play-services:9.4.0'
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.google.android.gms:play-services-location:7.5.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha8'
    testCompile 'junit:junit:4.12'
}

// Map for the version code that gives each ABI a value.
//ext.abiCodes = ['arm64-v8a':1, armeabi:2, 'armeabi-v7a':3, mips:4, mips64:5, x86:6, x86_64:7]
//ext.abiCodes = [armeabi:1, 'armeabi-v7a':2, mips:3, x86:4]

//import com.android.build.OutputFile

//android.applicationVariants.all { variant ->
// Assigns a different version code for each output APK
// other than the universal APK.
//    variant.outputs.each { output ->
//        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

// Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
// the following code does not override the version code for universal APKs.
// However, because we want universal APKs to have the lowest version code,
// this outcome is desirable.
//        if (baseAbiVersionCode != null) {
// Assigns the new version code to versionCodeOverride, which changes the version code
// for only the output APK, not for the variant itself. Skipping this step simply
// causes Gradle to use the value of variant.versionCode for the APK.
//            output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
//        }
//    }
//}